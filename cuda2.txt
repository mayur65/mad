VECTOR ADDITION

#include<math.h>
#include<time.h>
#include<stdexcept>
#include<iostream>

using namespace std;

int NUMBER_OF_ELEMENTS  = 1<<5;
int SIZE  = NUMBER_OF_ELEMENTS*sizeof(int);

__global__ void kernel_sum( int* A,  int* B, int* C, int NUMBERofELEMENTS);

void sum( int* A,  int* B, int* C, int n_el);

int main()
{

   //allocate memory for host vectors

	int* hostA = (int*)malloc(SIZE);
	int* hostB = (int*)malloc(SIZE);
	int* hostC = (int*)malloc(SIZE);

	int* deviceA,*deviceB,*deviceC;

	srand(time(0));
	int i;
	for(i=0;i<NUMBER_OF_ELEMENTS;i++)
	{
		hostA[i] = rand()%1000;
		hostB[i] = rand()%1000;
	}


	//allocate memory for device vectors

	cudaMalloc(&deviceA,SIZE);
	cudaMalloc(&deviceB,SIZE);
	cudaMalloc(&deviceC,SIZE);

	//kernel function
	cudaMemcpy(deviceA,hostA,SIZE,cudaMemcpyHostToDevice);
	cudaMemcpy(deviceB,hostB,SIZE,cudaMemcpyHostToDevice);

	sum(deviceA,deviceB,deviceC,NUMBER_OF_ELEMENTS);

    cudaMemcpy(hostC,deviceC,SIZE,cudaMemcpyDeviceToHost);


	cudaFree(deviceA);
	cudaFree(deviceB);
	cudaFree(deviceC);

	double error = 0;
	for(i = 0;i<NUMBER_OF_ELEMENTS;i++)
	{
		double diff = double((hostA[i]+hostB[i])-hostC[i]);
		error+=diff;

		cout<<"A = "<<hostA[i]<<"\t";
		cout<<"B = "<<hostB[i]<<"\n";
		cout<<"C = "<<hostC[i]<<"\n\n";
	}

	error = sqrt(error);
	cout<<"error  = "<<error<<endl;

	delete[] hostA;
    delete[] hostB;
    delete[] hostC;



    return cudaDeviceSynchronize();



    


}


void sum( int* A,  int* B, int* C, int n_el)
{
	int threadsPerblock,blocksperGrid;

	if(n_el<512)
	{
		threadsPerblock = n_el;
		blocksperGrid = 1;
	}
	else
	{
		threadsPerblock = 512;
		blocksperGrid = ceil(double(n_el)/double(threadsPerblock));
	}

	//now invoke kernel method
	kernel_sum<<<blocksperGrid,threadsPerblock>>>(A,B,C,n_el);
}


__global__ void kernel_sum( int* A,  int* B, int* C, int NUMBERofELEMENTS)
{
	//calculate unique thread index

	int index = blockDim.x * blockIdx.x + threadIdx.x;

	if(index<NUMBERofELEMENTS)
	C[index] = A[index] + B[index];
}




VECTOR MATRIX MUL

#include<math.h>
#include<time.h>
#include<stdexcept>
#include<iostream>
#include<cstdlib> //for abs(x)
#include<stdio.h>

using namespace std;

int NUMBER_OF_ELEMENTS  = 1<<6;
int SIZE  = NUMBER_OF_ELEMENTS*sizeof(int);
int VECTOR_SIZE = 1<<4;

__global__ void kernel_multiplication( int* A,  int* B, int* C,int N,int M);


int main()
{

   //allocate memory for host vectors

	int* hostA = (int*)malloc(VECTOR_SIZE*sizeof(int));
	int* hostB = (int*)malloc(SIZE*VECTOR_SIZE);
	int* hostC = (int*)malloc(VECTOR_SIZE*sizeof(int));

	int* deviceA,*deviceB,*deviceC;

	srand(time(0));
	int i,j;

	//initialize host vector by random elements
	for(i=0;i<VECTOR_SIZE;i++)
	{
		hostA[i] = rand()%1000;
		
	}

	//initialize matrix by random elements
	for(i=0;i<NUMBER_OF_ELEMENTS;i++)
	{
		for(j=0;j<VECTOR_SIZE;j++)
		{
			hostB[i*VECTOR_SIZE+j] = rand()%1000;
		}
	}




	//allocate memory for device vectors

	cudaMalloc(&deviceA,VECTOR_SIZE*sizeof(int));
	cudaMalloc(&deviceB,NUMBER_OF_ELEMENTS*VECTOR_SIZE*sizeof(int));
	cudaMalloc(&deviceC,VECTOR_SIZE*sizeof(int));

	//kernel function
	
	cudaMemcpy(deviceA,hostA,VECTOR_SIZE*sizeof(int),cudaMemcpyHostToDevice);
	
	cudaMemcpy(deviceB,hostB,SIZE*VECTOR_SIZE,cudaMemcpyHostToDevice);

	kernel_multiplication<<<NUMBER_OF_ELEMENTS,1>>>(deviceA,deviceB,deviceC,NUMBER_OF_ELEMENTS,VECTOR_SIZE);


	cudaDeviceSynchronize();

    cudaMemcpy(hostC,deviceC,VECTOR_SIZE*sizeof(int),cudaMemcpyDeviceToHost);


	cudaFree(deviceA);
	cudaFree(deviceB);
	cudaFree(deviceC);

	double error = 0;

    int* answer = (int*) malloc(VECTOR_SIZE*sizeof(int));
	for(int i=0;i<NUMBER_OF_ELEMENTS;i++)
	{
	int sum = 0;
	for(int j=0;j<VECTOR_SIZE;j++)
	{
		sum += hostA[j]*hostB[i*VECTOR_SIZE+j];
	}
	answer[i] = sum;
	}

	for(int k=0;k<VECTOR_SIZE;k++)
	{
	cout<<k<<")"<< "Expected value = "<<answer[k]<<" Actual value = "<<hostC[k]<<"\n";
	error += double(abs(answer[k]-hostC[k]));
	}

	error=sqrt(error);
	cout<<"error = "<<error<<"\n";

	delete[] hostA;
    delete[] hostB;
    delete[] hostC;



    return cudaDeviceSynchronize();

}




__global__ void kernel_multiplication( int* A,  int* B, int* C, int N,int M)
{
	int index =  threadIdx.x + blockIdx.x * blockDim.x;
	int sum = 0;

	//printf("index = %d  and blockId is %d\n",index,blockIdx.x);


	if(index<N)
	{
		for(int i=0;i<M;i++)
		sum+=A[i]*B[(index*M)+i];
		C[index] = sum;

		

		//printf("index = %d and value is %d\n",index,C[index]);
	}
}



MATRIX NxN MUL


#include<iostream>
#include<time.h>
#include<cstdlib>
#include<stdlib.h>

using namespace std;
__global__ void matrixMultiplication(int* A,int* B,int* C,int N);


void mm(int* A,int* B,int* C,int N);

int main()
{
	int ROWS = 1<<2;
	int COLS = 1<<2; //since in question it is asked to take N*N array

	int* hostA = (int*)malloc(sizeof(int)*ROWS*COLS);
	int* hostB = (int*)malloc(sizeof(int)*ROWS*COLS);
	int* hostC = (int*)malloc(sizeof(int)*ROWS*COLS);


	//initialize matrices A and B by random numbers
	srand(time(0));
	int i,j;
	for(i=0;i<ROWS;i++)
	{
		for(j=0;j<COLS;j++)
		{
			hostB[i*COLS+j] = rand()%30;
			hostA[i*COLS+j] = rand()%20;
		}
	}

	int* deviceA,*deviceB,*deviceC;

	cudaMalloc(&deviceA,sizeof(int)*ROWS*COLS);
	cudaMalloc(&deviceB,sizeof(int)*ROWS*COLS);
	cudaMalloc(&deviceC,sizeof(int)*ROWS*COLS);

	cudaMemcpy(deviceA,hostA,sizeof(int)*ROWS*COLS,cudaMemcpyHostToDevice);
	
	cudaMemcpy(deviceB,hostB,sizeof(int)*ROWS*COLS,cudaMemcpyHostToDevice);

	mm(deviceA,deviceB,deviceC,ROWS);


	cudaError_t e=cudaGetLastError();                                 
 if(e!=cudaSuccess) {                                              
   printf("Cuda failure %s: ",cudaGetErrorString(e));           
   
 }     

	cudaDeviceSynchronize();
   
    cudaMemcpy(hostC,deviceC,ROWS*COLS*sizeof(int),cudaMemcpyDeviceToHost);


	cudaFree(deviceA);
	cudaFree(deviceB);
	cudaFree(deviceC);


	//now do actual multiplication
	int N = ROWS;
	int* actual = (int*)malloc(sizeof(int)*ROWS*COLS);
	int sum;
	for (int row=0; row<ROWS; row++){
        for (int col=0; col<COLS; col++){
             sum=0;
            for (int n=0; n<N; n++){
                sum += hostA[row*N+n]*hostB[n*N+col];
            }
            actual[row*N+col] = sum;
        }
    }


    double error = 0;
    for(int k=0;k<ROWS*COLS;k++)
	{
	cout<<k<<")"<< "Expected value = "<<actual[k]<<" Actual value = "<<hostC[k]<<"\n";
	error += double(abs(actual[k]-hostC[k]));
	}




	error=sqrt(error);
	cout<<"error = "<<error<<"\n";

	delete[] hostA;
    delete[] hostB;
    delete[] hostC;



}

__global__ void matrixMultiplication(int* A,int* B,int* C,int N)
{

	//printf("hi in mult\n");
	int ROW = blockIdx.y*blockDim.y+threadIdx.y;
	int COL = blockIdx.x*blockDim.x+threadIdx.x;

	   

    //printf("ROW = %d and COL is %d\n",ROW,COL);
	int sum =0 ;
	if(ROW<N && COL<N)
	{
	for(int i=0;i<N;i++)
	{
	sum+=A[ROW*N+i]*B[i*N+COL];
	}
	__syncthreads();    
	C[ROW*N+COL]=sum;
	}
	
}


void mm(int* A,int* B,int* C,int N)
{
	dim3 threadsPerblock(N,N);
	dim3 blocksPerGrid(1,1);

	if(N*N>512)
	{
	threadsPerblock.x = 512;
	threadsPerblock.y=512;
	blocksPerGrid.x = ceil(double(N)/double(threadsPerblock.x));
	blocksPerGrid.y = ceil(double(N)/double(threadsPerblock.y));

	}

	cout<<"calling mult"<<"\n";

	matrixMultiplication<<<blocksPerGrid,threadsPerblock>>>(A,B,C,N);
}
